---
import { Image } from "astro:assets";

import Footer from "../../components/Footer.astro";
import Link from "../../components/General/Link.astro";
import Header from "../../components/Header.astro";
import ProjectCats from "../../components/Project/Project-Cats.astro";
import ToolCard from "../../components/Tool-Card.astro";
import Layout from "../../layouts/Layout.astro";

import code from "../../assets/projects/scrapercode.png";
import wiki from "../../assets/projects/wiki.png";
---

<Layout title="Hunter Van Lear">
  <Header />
  <main class="container flex flex-col">
    <section class="hero-section container">
      <Link arrowOnLeft text="projects" url="" />
      <div class="container-name">
        <h1
          class="primary-header mt-4 text-sans-bold flex flex-col md:flex-row"
        >
          <p class="">Stephen King</p>
          <p class="md:ml-3">REST API</p>
        </h1>
      </div>
      <div class="container-project-cats mt-5 space-x-5 flex flex-row">
        <ProjectCats color="#FFC850" title="Development" />
        <ProjectCats color="#FFC850" title="API Design" />
      </div>
    </section>
    <section class="section-description grid mt-8">
      <div class="container-description text-sans">
        <div class="container-description__description">
          <p class="description">
            A RESTful API built from the collected works of the horror master. I
            thought it strange that there was no pragmatically accessible data
            for one of the greatest living authors, so I built one. His loosely
            connected works fit perfectly into a relational database schema.
          </p>
        </div>
        <div class="container-description__link flex justify-end">
          <Link
            text="view site"
            url="https://stephen-king-api.onrender.com/"
            newWindow
          />
        </div>
      </div>
    </section>
    <section class="section-goal mt-20">
      <div class="container-goal">
        <div class="container-goal__tools flex flex-col space-y-20">
          <div class="tools-row flex flex-row space-x-10">
            <ToolCard
              url="/svg/tools-js.svg"
              ,
              title="Javascript"
              ,
              content="For interaction design testing"
            />
            <ToolCard
              url="/svg/tools-js.svg"
              ,
              title="Javascript"
              ,
              content="For interaction design testing"
            />
          </div>
          <div class="tools-row flex flex-row space-x-10">
            <ToolCard
              url="/svg/tools-js.svg"
              ,
              title="Javascript"
              ,
              content="For interaction design testing"
            />
            <ToolCard
              url="/svg/tools-js.svg"
              ,
              title="Javascript"
              ,
              content="For interaction design testing"
            />
          </div>
        </div>
        <div class="container-goal__goal">
          <div class="goal-header text-sans-bold">
            <h2 class="secondary-header">The Goal</h2>
          </div>
          <div class="goal-text text-sans">
            <p>
              With 65 novels/novellas, over 200 short stories, and countless
              memorable characters I wanted a way to access this information
              programatically. Moreover, many of his works are loosely connected
              in a 'King Universe', with different characters and locations
              popping up accross multiple fictions. As a fan, those
              relationships have always facinated me and as developer they
              seemed to fit perfectly in a strucutred database.
            </p>
          </div>
        </div>
      </div>
    </section>
    <section class="section-challenge mt-20">
      <div class="container-challenge grid">
        <div class="container-challenge__challenge">
          <div class="challenge-header text-sans-bold">
            <h2 class="secondary-header">The Data Challenge</h2>
          </div>
          <div class="challenge-text text-sans">
            <p>
              <span class="text-sans-bold">What, Where, How</span>
              <br /><br />
               Lets start with the easiest question - <span
                class="text-sans-bold">How</span
              > am I going to get this data? Scraping, both with Python's
              BeautifulSoup and Javascript's Cheerio.
              <br /><br />
              <span class="text-sans-bold">What</span> type of data should I
              include? obviously I needed basic bibliophic info about the works
              like publish date, publisher, page count etc.. But I also wanted
              character data - specifically books they were in. On top of that I
              needed a common data point shared between entities the so that I
              could make those relationships programmically.
            </p>
          </div>
        </div>
        <div class="container-challenge__image flex flex-col space-y-20">
          <Image loading="lazy" src={code} alt="A stack of King books" />
        </div>
      </div>
    </section>
    <section class="section-challenge ">
      <div class="container-challenge-cont">
        <div class="container-challenge-cont__image flex flex-col space-y-20">
          <Image
            class="img_screen"
            loading="lazy"
            src={wiki}
            alt="King's wikipedia bibliography"
          />
        </div>
        <div class="container-challenge-cont__challenge">
          <div class="challenge-text text-sans">
            <p>
              <span class="text-sans-bold">Where</span> am I going to source my
              data? I initially turned to Wikipedia, which provides a
              comprehensive list of Stephen King's entire body of work,
              including bibliographic data in a scraper-friendly format.
              However, I encountered challenges when attempting to extract
              character information due to inconsistent formatting across
              individual Wikipedia pages for King's works. Fortunately, I found
              an alternative source in the form of dedicated fan wikis related
              to Stephen King's work. Specifically, I leveraged the information
              available on the <a
                style="color:#5c02ff"
                href="https://villains.fandom.com/wiki/Category:Stephen_King_Villains"
                >Fandom</a
              > website, which offered a wealth of character data relevant to my
              project. This alternative source allowed me to successfully scrape
              and integrate character information into the API.
            </p>
          </div>
        </div>
      </div>
    </section>
  </main>
  <footer id="footer">
    <Footer />
  </footer>
</Layout>

<style>
  main {
    min-height: 85vh;
    margin: auto;
    padding: 1rem;
    /* max-width: calc(100% - 2rem); */
    color: var(--clr-white);
    font-size: 20px;
    line-height: 1.6;
    animation: transitionIn 1s;
  }

  .img_screen {
    border-radius: 4px;
  }
  
  .primary-header > p {
    line-height: 0.8;
    font-size: 5rem;
  }

  .secondary-header{
    font-size: 3rem;
  }

  @media (max-width:1000px){
    .primary-header > p {
      font-size: 14.06vw;
    }
    .primary-header p:last-child{
      margin-top: 1rem;
    }
    .secondary-header {
      font-size: 10vw;
      white-space: nowrap;
    }
  }

  .section-description {
    grid-template-columns: repeat(12, 1fr);
    gap: 1rem;
  }

  .description {
    font-size: 1.5rem;
  }

  .container-description {
    display: grid;
    grid-column: 1 / 10;
  }

  .container-challenge-cont__image {
    order: 2;
  }

  @media (min-width: 768px) {
    .container-challenge-cont__image {
      order: 1;
    }
    .container-challenge-cont__challenge{
      order: 2;
    }
  }

  .container-goal,
  .container-challenge-cont {
    display: grid;
    grid-template-columns: 1fr;
    gap: 20px;
  }

  @media (min-width: 1000px) {
    .container-goal,
    .container-challenge-cont {
      grid-template-columns: 1fr 2fr;
    }
  }

  .container-challenge {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0px;
  }

  @media (min-width: 1000px) {
    .container-challenge {
      grid-template-columns: 2fr 2fr;
    }
  }

  .byline {
    padding: 0.1rem 0;
    animation-delay: 1s;
    animation: transitionLeft 1s;
    font-size: 3rem;
    line-height: 1;
  }

  .stagger {
    animation: transitionLeft 1.3s;
  }

  /* ANIMATIONS */

  @keyframes transitionIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes transitionLeft {
    0% {
      opacity: 0;
      transform: translateX(-5px);
    }
    80% {
      transform: translateX(3px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @media (min-width: 768px) {
    #links-section {
      flex-direction: row;
    }
  }
</style>
